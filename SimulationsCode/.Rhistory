pre_cap<-merge(pre_cap,pre_cap_t,by="ID",all.x=TRUE,all.y=TRUE)
}
CG[[ds]]<-captured_gbi
OG[[ds]]<-observed_gbi
SW_store[[ds]]<-samp_wind
network<-get_network2(gbi)
network_obs<-get_network2(observed_gbi)
clustering_local_w(as.tnet(network_obs))
indiv_data<-covariates_survival(indiv_data=indiv_data,indiv_info=indiv_info,network=network,
group_means=NULL,
ext_vars="sex",ext_effs=list(c(0,-1)),scale_ext=FALSE,
net_vars="clustering_local_w",net_effs=list(0.25),net_packages="tnet",scale_net=TRUE,
net_cov=TRUE,max_cor=-0.9,
mps=0.8,lvps=0.5)
boxplot(indiv_data$survival~indiv_info[[1]]$sex)
ts_surv[ds]<-mean(indiv_data$survival,na.rm=TRUE)
#Demographic timestep
if(ds==1){
new_info<-timestep_demographics(indiv_data=indiv_data,full_indiv_data=indiv_data,recruitment=FALSE,
mps=0.8,lvps=0.5)
}
if(ds>1){
new_info<-timestep_demographics(indiv_data=indiv_data,full_indiv_data=full_indiv_data,recruitment=FALSE,
mps=0.8,lvps=0.5)
}
prev_data<-indiv_data
indiv_data<-new_info[[1]]
full_indiv_data<-new_info[[2]]
dist_mat<-new_info[[3]]
indiv_info<-indiv_info_add(indiv_info[[1]],ii_tag=indiv_info[[2]],indiv_data=indiv_data)
net_info<-network_rewire_covariates(network=pop_mat,
indiv_data=indiv_data,prev_data=prev_data,dist_mat=dist_mat,indiv_info=indiv_info,
p_ig=0.2,wi_m=0.25,wi_v=0.025,
p_og=0.2,wo_m=0.25,wo_v=0.025,
d_effp=4,d_effw=4,
covs=2,effs,
p_wr_i=0,p_wr_e=0.5,
plot=TRUE)
pop_mat<-net_info[[1]]
pop_net<-net_info[[2]]
}
inds_alive[[1]]
inds_alive[[4]]
inds_alive[[10]]
capture_data<-cap_dat_gen(CG=OG,SW_store=SW_store,bs=beh_steps)
start_obs=1
end_obs=max(samp_wind)
interval_obs=2
start_cap=1
end_cap=4
interval_cap=1
which_keep<-unique(sort(c(seq(start_obs,end_obs,interval_obs),seq(start_cap,end_cap,interval_cap))))
keep_winds<-rep(0,beh_steps)
keep_winds[which_keep]<-1
#Add a 1 at the start to keep the IDs
#This version assumes demographic windows with the same capture strategy
#Can change later
keep_winds2<-c(1,rep(keep_winds,dem_steps))
att_caps<-capture_data[[2]]
att_caps<-att_caps[,keep_winds2==1]
head(att_caps)
clustering_local_w(as.tnet(network_obs))
dim(network_obs)
colSums(network_obs)
clu_tmp<-clustering_local_w(as.tnet(network_obs))
ds<-1
##Generate capture-recapture dataset
#Generate population
pop_info<-population_generation_basic(n=100,ng=100)
indiv_data<-pop_info[[1]]
dist_mat<-pop_info[[2]]
indiv_info<-data.frame(indiv_data$indivs)
indiv_info<-indiv_info_gen(indiv_info,ii_tag=NULL,indiv_data=indiv_data,trait="sex",trait_type="fac",level_names=c("M","F"))
indiv_info<-indiv_info_gen(indiv_info[[1]],ii_tag=indiv_info[[2]],indiv_data,trait="size",trait_type="cov",x_dist="norm")
start_info<-indiv_info
#Generate first network
effs<-list()
effs[[1]]<-matrix(c(0,0,0,1,1,1,0,0),nr=1,nc=8)
effs[[1]]<-rbind(rep(0,8),effs[[1]])
effs[[2]]<-matrix(c(0,0,0,0,0,0,-0.5,-0.5),nr=1,nc=8)
net_info<-network_generation_covariates(indiv_data,dist_mat,indiv_info,
p_ig=0.2,wi_m=0.25,wi_v=0.025,
p_og=0.2,wo_m=0.25,wo_v=0.025,
d_effp=4,d_effw=4,
covs=c(2,3),effs=effs,
plot=TRUE)
pop_mat<-net_info[[1]]
pop_net<-net_info[[2]]
##Step two: iterate over behavioural and demographic time steps
beh_steps<-5
dem_steps<-5
CG<-list()
OG<-list()
SW_store<-list()
inds_alive<-list()
pre_cap<-NULL
ts_surv<-numeric()
cluclo<-matrix(NA,nr=nrow(indiv_data),nc=dem_steps)
if(nrow(indiv_data)<5){break}
inds_alive[[ds]]<-indiv_data$indivs
#Sample over some behaviour only time steps
int_info<-interaction_generation_simul(indiv_data=indiv_data,pop_mat=pop_mat,
mean_group_size=2,n_ts=beh_steps,
float=0.000000001,par=50,pow=4)
gbi<-int_info[[1]]
samp_wind<-int_info[[2]]
if(ds>1){
if(ds==2){
pre_cap_t<-sign(pre_cap[!is.na(pre_cap[,ds]),ds])
}
if(ds>2){
pre_cap_t<-sign(rowSums(pre_cap[!is.na(pre_cap[,ds]),2:ds],na.rm=TRUE))
}
pre_cap_t<-pre_cap_t[names(pre_cap_t)%in%indiv_data$indivs]
pre_cap_t2<-c(pre_cap_t,rep(0,sum(indiv_data$indivs%in%names(pre_cap_t)==FALSE)))
}
#Observe networks over these timesteps
if(ds==1){
obs_info<-cap_and_obs(samp_wind=samp_wind,gbi=gbi,
pcg=0.5,pmi=0.75,pci=0.75,
start_obs=1,end_obs=max(samp_wind),interval_obs=1,
start_cap=1,end_cap=1,interval_cap=1,
pre_cap=NULL)
}
if(ds>1){
obs_info<-cap_and_obs(samp_wind=samp_wind,gbi=gbi,
pcg=0.5,pmi=0.75,pci=0.75,
start_obs=1,end_obs=max(samp_wind),interval_obs=1,
start_cap=1,end_cap=1,interval_cap=1,
pre_cap=pre_cap_t2)
}
captured_gbi<-obs_info[[1]]
captured_groups<-obs_info[[2]]
observed_gbi<-obs_info[[3]]
observed_groups<-obs_info[[4]]
if(ds==1){
pre_cap<-data.frame(indiv_data$indivs,sign(colSums(captured_gbi)))
names(pre_cap)<-c("ID","cap")
}
if(ds>1){
pre_cap_t<-data.frame(indiv_data$indivs,sign(colSums(captured_gbi)))
names(pre_cap_t)<-c("ID","cap")
pre_cap<-merge(pre_cap,pre_cap_t,by="ID",all.x=TRUE,all.y=TRUE)
}
CG[[ds]]<-captured_gbi
OG[[ds]]<-observed_gbi
SW_store[[ds]]<-samp_wind
network<-get_network2(gbi)
network_obs<-get_network2(observed_gbi)
clu_tmp<-clustering_local_w(as.tnet(network_obs))
clu_tmp<-met[,ncol(clu_tmp)]
clu_tmp[is.na(clu_tmp)]<-0
if(length(clu_tmp)<nrow(network)){
clu_tmp<-c(clu_tmp,rep(0,(nrow(network)-length(clu_tmp))))
}
clu_tmp
plot(graph.adjacency(network_obs),mode="undirected",weighted=TRUE)
plot(graph.adjacency(network_obs),mode="undirected",weighted=NULL)
network_obs
colSums(network_obs)
##Generate capture-recapture dataset
#Generate population
pop_info<-population_generation_basic(n=100,ng=100)
indiv_data<-pop_info[[1]]
dist_mat<-pop_info[[2]]
indiv_info<-data.frame(indiv_data$indivs)
indiv_info<-indiv_info_gen(indiv_info,ii_tag=NULL,indiv_data=indiv_data,trait="sex",trait_type="fac",level_names=c("M","F"))
indiv_info<-indiv_info_gen(indiv_info[[1]],ii_tag=indiv_info[[2]],indiv_data,trait="size",trait_type="cov",x_dist="norm")
start_info<-indiv_info
#Generate first network
effs<-list()
effs[[1]]<-matrix(c(0,0,0,1,1,1,0,0),nr=1,nc=8)
effs[[1]]<-rbind(rep(0,8),effs[[1]])
effs[[2]]<-matrix(c(0,0,0,0,0,0,-0.5,-0.5),nr=1,nc=8)
net_info<-network_generation_covariates(indiv_data,dist_mat,indiv_info,
p_ig=0.2,wi_m=0.25,wi_v=0.025,
p_og=0.2,wo_m=0.25,wo_v=0.025,
d_effp=4,d_effw=4,
covs=c(2,3),effs=effs,
plot=TRUE)
pop_mat<-net_info[[1]]
pop_net<-net_info[[2]]
##Step two: iterate over behavioural and demographic time steps
beh_steps<-5
dem_steps<-5
CG<-list()
OG<-list()
SW_store<-list()
inds_alive<-list()
pre_cap<-NULL
ts_surv<-numeric()
cluclo<-matrix(NA,nr=nrow(indiv_data),nc=dem_steps)
ds
if(nrow(indiv_data)<5){break}
inds_alive[[ds]]<-indiv_data$indivs
#Sample over some behaviour only time steps
int_info<-interaction_generation_simul(indiv_data=indiv_data,pop_mat=pop_mat,
mean_group_size=2,n_ts=beh_steps,
float=0.000000001,par=50,pow=4)
gbi<-int_info[[1]]
samp_wind<-int_info[[2]]
#Check networks produced
#Currently not implemented
#network_checker_simul(gbi=gbi,pop_net=pop_net)
if(ds>1){
if(ds==2){
pre_cap_t<-sign(pre_cap[!is.na(pre_cap[,ds]),ds])
}
if(ds>2){
pre_cap_t<-sign(rowSums(pre_cap[!is.na(pre_cap[,ds]),2:ds],na.rm=TRUE))
}
pre_cap_t<-pre_cap_t[names(pre_cap_t)%in%indiv_data$indivs]
pre_cap_t2<-c(pre_cap_t,rep(0,sum(indiv_data$indivs%in%names(pre_cap_t)==FALSE)))
}
#Observe networks over these timesteps
if(ds==1){
obs_info<-cap_and_obs(samp_wind=samp_wind,gbi=gbi,
pcg=0.5,pmi=0.9,pci=0.9,
start_obs=1,end_obs=max(samp_wind),interval_obs=1,
start_cap=1,end_cap=2,interval_cap=1,
pre_cap=NULL)
}
if(ds>1){
obs_info<-cap_and_obs(samp_wind=samp_wind,gbi=gbi,
pcg=0.5,pmi=0.9,pci=0.9,
start_obs=1,end_obs=max(samp_wind),interval_obs=1,
start_cap=1,end_cap=2,interval_cap=1,
pre_cap=pre_cap_t2)
}
captured_gbi<-obs_info[[1]]
captured_groups<-obs_info[[2]]
observed_gbi<-obs_info[[3]]
observed_groups<-obs_info[[4]]
if(ds==1){
pre_cap<-data.frame(indiv_data$indivs,sign(colSums(captured_gbi)))
names(pre_cap)<-c("ID","cap")
}
if(ds>1){
pre_cap_t<-data.frame(indiv_data$indivs,sign(colSums(captured_gbi)))
names(pre_cap_t)<-c("ID","cap")
pre_cap<-merge(pre_cap,pre_cap_t,by="ID",all.x=TRUE,all.y=TRUE)
}
CG[[ds]]<-captured_gbi
OG[[ds]]<-observed_gbi
SW_store[[ds]]<-samp_wind
network<-get_network2(gbi)
network_obs<-get_network2(observed_gbi)
clu_tmp<-clustering_local_w(as.tnet(network_obs))
clu_tmp<-met[,ncol(clu_tmp)]
clu_tmp[is.na(clu_tmp)]<-0
if(length(clu_tmp)<nrow(network)){
clu_tmp<-c(clu_tmp,rep(0,(nrow(network)-length(clu_tmp))))
}
clu_tmp<-clustering_local_w(as.tnet(network_obs))
clu_tmp<-clu_tmp[,ncol(clu_tmp)]
clu_tmp[is.na(clu_tmp)]<-0
if(length(clu_tmp)<nrow(network)){
clu_tmp<-c(clu_tmp,rep(0,(nrow(network)-length(clu_tmp))))
}
clu_tmp
clu_tmp<-clustering_local_w(as.tnet(network_obs))
clu_tmp
network_obs
dim(network_obs)
colSums(observed_gbi)
clu_tmp<-clustering_local_w(as.tnet(network_obs))
clu_tmp<-clu_tmp[,ncol(clu_tmp)]
clu_tmp[is.na(clu_tmp)&colSums(observed_gbi)>0]<-0
is.na(clu_tmp)
colSums(observed_gbi)>0
is.na(clu_tmp)&colSums(observed_gbi)>0
clu_tmp<-clustering_local_w(as.tnet(network_obs))
clu_tmp<-clu_tmp[,ncol(clu_tmp)]
if(sum(is.na(clu_tmp)&colSums(observed_gbi)>0)>0){
clu_tmp[is.na(clu_tmp)&colSums(observed_gbi)>0]<-0
}
colSums(observed_gbi)>0
length(colSums(observed_gbi)>0)
length(is.na(clu_tmp))
sum(is.na(clu_tmp)&colSums(observed_gbi)>0)
clu_tmp<-clustering_local_w(as.tnet(network_obs))
clu_tmp<-clu_tmp[,ncol(clu_tmp)]
if(length(clu_tmp)<nrow(network)){
clu_tmp<-c(clu_tmp,rep(NA,(nrow(network)-length(clu_tmp))))
}
clu_tmp
clu_tmp<-clustering_local_w(as.tnet(network_obs))
clu_tmp<-clu_tmp[,ncol(clu_tmp)]
if(length(clu_tmp)<nrow(network)){
clu_tmp<-c(clu_tmp,rep(NaN,(nrow(network)-length(clu_tmp))))
}
clu_tmp
clu_tmp<-clustering_local_w(as.tnet(network_obs))
clu_tmp
clu_tmp<-clu_tmp[,ncol(clu_tmp)]
if(length(clu_tmp)<nrow(network)){
clu_tmp<-c(clu_tmp,rep(NaN,(nrow(network)-length(clu_tmp))))
}
if(sum(is.na(clu_tmp)&colSums(observed_gbi)>0)>0){
clu_tmp[is.na(clu_tmp)&colSums(observed_gbi)>0]<-0
}
clu_tmp
indiv_data
cluclo[indiv_data$indivs,ds]<-clu_tmp
cluclo
##Generate capture-recapture dataset
#Generate population
pop_info<-population_generation_basic(n=100,ng=100)
indiv_data<-pop_info[[1]]
dist_mat<-pop_info[[2]]
indiv_info<-data.frame(indiv_data$indivs)
indiv_info<-indiv_info_gen(indiv_info,ii_tag=NULL,indiv_data=indiv_data,trait="sex",trait_type="fac",level_names=c("M","F"))
indiv_info<-indiv_info_gen(indiv_info[[1]],ii_tag=indiv_info[[2]],indiv_data,trait="size",trait_type="cov",x_dist="norm")
start_info<-indiv_info
#Generate first network
effs<-list()
effs[[1]]<-matrix(c(0,0,0,1,1,1,0,0),nr=1,nc=8)
effs[[1]]<-rbind(rep(0,8),effs[[1]])
effs[[2]]<-matrix(c(0,0,0,0,0,0,-0.5,-0.5),nr=1,nc=8)
net_info<-network_generation_covariates(indiv_data,dist_mat,indiv_info,
p_ig=0.2,wi_m=0.25,wi_v=0.025,
p_og=0.2,wo_m=0.25,wo_v=0.025,
d_effp=4,d_effw=4,
covs=c(2,3),effs=effs,
plot=TRUE)
pop_mat<-net_info[[1]]
pop_net<-net_info[[2]]
##Step two: iterate over behavioural and demographic time steps
beh_steps<-5
dem_steps<-5
CG<-list()
OG<-list()
SW_store<-list()
inds_alive<-list()
pre_cap<-NULL
ts_surv<-numeric()
cluclo<-matrix(NA,nr=nrow(indiv_data),nc=dem_steps)
for(ds in 1:dem_steps){
if(nrow(indiv_data)<5){break}
inds_alive[[ds]]<-indiv_data$indivs
#Sample over some behaviour only time steps
int_info<-interaction_generation_simul(indiv_data=indiv_data,pop_mat=pop_mat,
mean_group_size=2,n_ts=beh_steps,
float=0.000000001,par=50,pow=4)
gbi<-int_info[[1]]
samp_wind<-int_info[[2]]
#Check networks produced
#Currently not implemented
#network_checker_simul(gbi=gbi,pop_net=pop_net)
if(ds>1){
if(ds==2){
pre_cap_t<-sign(pre_cap[!is.na(pre_cap[,ds]),ds])
}
if(ds>2){
pre_cap_t<-sign(rowSums(pre_cap[!is.na(pre_cap[,ds]),2:ds],na.rm=TRUE))
}
pre_cap_t<-pre_cap_t[names(pre_cap_t)%in%indiv_data$indivs]
pre_cap_t2<-c(pre_cap_t,rep(0,sum(indiv_data$indivs%in%names(pre_cap_t)==FALSE)))
}
#Observe networks over these timesteps
if(ds==1){
obs_info<-cap_and_obs(samp_wind=samp_wind,gbi=gbi,
pcg=0.5,pmi=0.9,pci=0.9,
start_obs=1,end_obs=max(samp_wind),interval_obs=1,
start_cap=1,end_cap=2,interval_cap=1,
pre_cap=NULL)
}
if(ds>1){
obs_info<-cap_and_obs(samp_wind=samp_wind,gbi=gbi,
pcg=0.5,pmi=0.9,pci=0.9,
start_obs=1,end_obs=max(samp_wind),interval_obs=1,
start_cap=1,end_cap=2,interval_cap=1,
pre_cap=pre_cap_t2)
}
captured_gbi<-obs_info[[1]]
captured_groups<-obs_info[[2]]
observed_gbi<-obs_info[[3]]
observed_groups<-obs_info[[4]]
if(ds==1){
pre_cap<-data.frame(indiv_data$indivs,sign(colSums(captured_gbi)))
names(pre_cap)<-c("ID","cap")
}
if(ds>1){
pre_cap_t<-data.frame(indiv_data$indivs,sign(colSums(captured_gbi)))
names(pre_cap_t)<-c("ID","cap")
pre_cap<-merge(pre_cap,pre_cap_t,by="ID",all.x=TRUE,all.y=TRUE)
}
CG[[ds]]<-captured_gbi
OG[[ds]]<-observed_gbi
SW_store[[ds]]<-samp_wind
network<-get_network2(gbi)
network_obs<-get_network2(observed_gbi)
clu_tmp<-clustering_local_w(as.tnet(network_obs))
clu_tmp<-clu_tmp[,ncol(clu_tmp)]
if(length(clu_tmp)<nrow(network)){
clu_tmp<-c(clu_tmp,rep(NaN,(nrow(network)-length(clu_tmp))))
}
if(sum(is.na(clu_tmp)&colSums(observed_gbi)>0)>0){
clu_tmp[is.na(clu_tmp)&colSums(observed_gbi)>0]<-0
}
cluclo[indiv_data$indivs,ds]<-clu_tmp
indiv_data<-covariates_survival(indiv_data=indiv_data,indiv_info=indiv_info,network=network,
group_means=NULL,
ext_vars="sex",ext_effs=list(c(0,-1)),scale_ext=FALSE,
net_vars="clustering_local_w",net_effs=list(0.25),net_packages="tnet",scale_net=TRUE,
net_cov=TRUE,max_cor=-0.9,
mps=0.8,lvps=0.5)
boxplot(indiv_data$survival~indiv_info[[1]]$sex)
ts_surv[ds]<-mean(indiv_data$survival,na.rm=TRUE)
#Demographic timestep
if(ds==1){
new_info<-timestep_demographics(indiv_data=indiv_data,full_indiv_data=indiv_data,recruitment=FALSE,
mps=0.8,lvps=0.5)
}
if(ds>1){
new_info<-timestep_demographics(indiv_data=indiv_data,full_indiv_data=full_indiv_data,recruitment=FALSE,
mps=0.8,lvps=0.5)
}
prev_data<-indiv_data
indiv_data<-new_info[[1]]
full_indiv_data<-new_info[[2]]
dist_mat<-new_info[[3]]
indiv_info<-indiv_info_add(indiv_info[[1]],ii_tag=indiv_info[[2]],indiv_data=indiv_data)
net_info<-network_rewire_covariates(network=pop_mat,
indiv_data=indiv_data,prev_data=prev_data,dist_mat=dist_mat,indiv_info=indiv_info,
p_ig=0.2,wi_m=0.25,wi_v=0.025,
p_og=0.2,wo_m=0.25,wo_v=0.025,
d_effp=4,d_effw=4,
covs=2,effs,
p_wr_i=0,p_wr_e=0.5,
plot=TRUE)
pop_mat<-net_info[[1]]
pop_net<-net_info[[2]]
}
inds_alive[[1]]
inds_alive[[4]]
inds_alive[[10]]
capture_data<-cap_dat_gen(CG=OG,SW_store=SW_store,bs=beh_steps)
start_obs=1
end_obs=max(samp_wind)
interval_obs=2
start_cap=1
end_cap=4
interval_cap=1
which_keep<-unique(sort(c(seq(start_obs,end_obs,interval_obs),seq(start_cap,end_cap,interval_cap))))
keep_winds<-rep(0,beh_steps)
keep_winds[which_keep]<-1
#Add a 1 at the start to keep the IDs
#This version assumes demographic windows with the same capture strategy
#Can change later
keep_winds2<-c(1,rep(keep_winds,dem_steps))
att_caps<-capture_data[[2]]
att_caps<-att_caps[,keep_winds2==1]
head(att_caps)
cluclo
hmm.survival3 <- nimbleCode({
beta[1] ~ dnorm(mean=0,sd=10) #prior female
beta[2] ~ dnorm(mean=0,sd=10) #prior male
beta[3] ~ dnorm(mean=0,sd=10)
p ~ dunif(0, 1) # prior detection
# likelihood
omega[1,1] <- 1 - p    # Pr(alive t -> non-detected t)
omega[1,2] <- p        # Pr(alive t -> detected t)
omega[2,1] <- 1        # Pr(dead t -> non-detected t)
omega[2,2] <- 0        # Pr(dead t -> detected t)
for (i in 1:N){
for(j in 1:(T-1)){
logit(phi[i]) <- beta[sex[i]]+beta[3]*cluclo[i,j]
gamma[1,1,i,j] <- phi[i]      # Pr(alive t -> alive t+1)
gamma[1,2,i,j] <- 1 - phi[i]  # Pr(alive t -> dead t+1)
gamma[2,1,i,j] <- 0           # Pr(dead t -> alive t+1)
gamma[2,2,i,j] <- 1           # Pr(dead t -> dead t+1)
}
}
delta[1] <- 1          # Pr(alive t = 1) = 1
delta[2] <- 0          # Pr(dead t = 1) = 0
for (i in 1:N){
z[i,1] ~ dcat(delta[1:2])
for (j in 2:T){
z[i,j] ~ dcat(gamma[z[i,j-1], 1:2, i,j-1])
y[i,j] ~ dcat(omega[z[i,j], 1:2])
}
}
})
my.constants <- list(N = nrow(y), T = ncol(y)-1, sex=as.numeric(start_info[[1]]$sex))
my.constants
my.data <- list(y = as.matrix(y[,2:ncol(y)]+1),cluclo=cluclo)
my.data
zinits <- as.matrix(y[,2:ncol(y)] + 1) # non-detection -> alive
zinits[zinits == 2] <- 1 # dead -> alive
initial.values <- function() list(beta = rnorm(3,0,3),
p = runif(1,0,1),
z = zinits)
parameters.to.save <- c("beta","p")
parameters.to.save
n.iter <- 25000
n.burnin <- 5000
n.chains <- 4
thin<-5
start_time <- Sys.time()
mcmc.output <- nimbleMCMC(code = hmm.survival2,
constants = my.constants,
data = my.data,
inits = initial.values,
monitors = parameters.to.save,
niter = n.iter,
nburnin = n.burnin,
nchains = n.chains,
thin=thin)
end_time <- Sys.time()
end_time - start_time
MCMCsummary(mcmc.output, round = 2)
