library(igraph)
## also requires MASS but you can edit that dependency in the script below

triplet= function(u) {
## u is a vector of three values between 0 and 1
  uu=sort(u,decreasing=T)
  omega = (uu[1]+uu[2]-2*uu[3])/uu[1] - 1
  gini = (uu[1]-uu[3])/sum(uu)
  return(c(omega=omega, gini=gini))
}

WeightedTransitivity = function(g, rescale="no", distance.test=FALSE, quadrant.test=TRUE, nsim=100) {
## g is a weighted graph of class igraph
## rescale is the method to rescale the edge weights: logit, minmax, or no
## distance.test is to run a simulation to assess the statistical significance of the transitivity scores based on C_omega and C_G
## quadrant.test is to run a simulation to assess the statistical significance of the transitivity scores based on triplet distribution
## nsim is the number of replicates in the simulations
 
 x = E(g)$weight
 if(rescale=="minmax") {
   if(min(x)<0) x=x-min(x)
   x= x/max(x)  #rescale weights between 0 and 1
   E(g)$weight = x
 } else {
 if(rescale=="logit") {
   x = x-mean(x) ; x = plogis((x-mean(range(x)))/mean(range(x))) ; x = pmax(cstar,pmin(0.99,(x-min(x))/(max(x)-min(x))))
   E(g)$weight = x
 } else {
   if(min(x)<0) cat("Negative weight\n")
 }}
 A = as.matrix(as_adjacency_matrix(g,attr="weight"))
 N = dim(A)[1] #number of vertices  
 
 TAB = NULL
 for(i in 1:(N-2)) {
 for(j in (i+1):(N-1)) {
 for(k in (j+1):N) {
   u = c(A[i,j],A[i,k],A[j,k])
   if(max(u)>0) {
   tr = triplet(u)
   o = order(u,decreasing=T)
   TAB = rbind(TAB, c(c(i,j,k)[o], u[o], tr))
   }
 }}}
 TAB = data.frame(TAB)
 colnames(TAB) = c("vert1","vert2","vert3","a","b","c","omega","gini")

 Comega = mean(TAB$omega)
 Cgini = mean(TAB$gini)
 WT = list(Comega=Comega, Cgini=Cgini, triads=TAB)
 cat("C_omega =",round(Comega,3), "  C_Gini =",round(Cgini,3), "\n")
   
 if(distance.test) {
  Co = WT$Comega
  Cg = WT$Cgini
  nE = length(E(g))
  nV = length(V(g))
  Ew = E(g)$weight
  
  Cosim=Cgsim=NULL
  for (k in 1:nsim) {
     gsim <- sample_gnm(nV,nE)
     Ewsim <- sample(Ew, nE, replace=FALSE)
     E(gsim)$weight <- Ewsim
     WTsim = WeightedTransitivity(gsim, distance.test=FALSE, quadrant.test=FALSE)
     Cosim <- c(Cosim, WTsim$Comega)
     Cgsim <- c(Cgsim, WTsim$Cgini)
  }
  
  SIG = cov(cbind(Cosim,Cgsim)) ; if(det(SIG)==0) {SIG=diag(2) ; cat("All simulation results the same -> check data quality\n")}
  X = c(Co,Cg)
  MU = c(mean(Cosim),mean(Cgsim))
  MD = drop(sqrt( t(X-MU)%*%MASS::ginv(SIG)%*%(X-MU) ))
  WT$Mahalanobis <- MD ; WT$distance.Pval <- 1-pchisq(MD,2)
  WT$ComegaZero <- MU[1]
  WT$CginiZero <- MU[2]
  cat("Distance test: P-val =",round(1-pchisq(MD,2),3),"\n")
 }
 
 if(quadrant.test) {
    nE = length(E(g))
    nV = length(V(g))
    Ew = c(E(g)$weight, rep(0, nV*(nV-1)/2 - nE))
    omega=G=NULL
    for (kkk in 1:10) {
    nnsim=0
    while(nnsim<dim(WT$triplets)[1]) {
      u =sample(Ew, 3, replace=FALSE)
      if(max(u)>0) {
      nnsim=nnsim+1
      u = sort(u,decreasing=T)  
      omega=c(omega,(u[2]-2*u[3])/u[1])
      G=c(G, (u[1]-u[3])/(u[1]+u[2]+u[3]))
      }}
    }
    A1=sum(omega<=0 & G<=0.25)   
    A2=sum(omega<=0 & G>=0.25)   
    A3=sum(omega>=0 & G<=2/3)    
    A4=sum(omega>=0 & G>=2/3)    
    B1=sum(WT$triplets$omega<=0 & WT$triplets$gini<=0.25)   
    B2=sum(WT$triplets$omega<=0 & WT$triplets$gini>=0.25)   
    B3=sum(WT$triplets$omega>=0 & WT$triplets$gini<=2/3)    
    B4=sum(WT$triplets$omega>=0 & WT$triplets$gini>=2/3)    
    tabl = data.frame(random=c(A1,A2,A3,A4)/10,observed=c(B1,B2,B3,B4),row.names=c("balanced triangles","weak triplets closed by strong links","strong triplets closed by weak links","nearly false triplets"))
    WT$quadrant.table=tabl ; WT$quadrant.Pval = chisq.test(tabl)$p.value
    cat("Quadrant test: P-val =" , round(chisq.test(tabl)$p.value,3),"\n")
 }
 
 return(WT)
}
