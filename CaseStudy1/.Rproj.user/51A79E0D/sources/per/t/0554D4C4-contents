###R code to simulate shark movement networks and test effectiveness of ERGMs as
###a statistical tool

##Author: Matthew Silk

#Load required packages
library(network)
library(ergm)
library(ergm.count)
library(R.utils)

setwd("~/shark_sim_res")


set.seed(1)

for(mm in 1:20){

  times<-array(NA,dim=c(21,3,10))
  tc<-1

  #Define receiver locations
  n.locs<-25
  locs<-seq(1,n.locs,1)
  x<-runif(n.locs,0,10)
  y<-runif(n.locs,0,10)

  #Plot of receiver locations in geographic space
  plot(x,y)

  # Calculate distance matrix for receiver locations
  dist_mat<-as.matrix(dist(cbind(x,y),upper=TRUE))

  #Define some environmental explanatory variables
  swell<-rnorm(n.locs,0,1)
  rain<-rnorm(n.locs,0,1)
  turbidity<-rnorm(n.locs,0,1)

  #Define a number of sharks
  n.sharks<-10
  sharks<-seq(1,n.sharks,1)

  #Generate a number of movements for each shark
  #Currently set as a Poisson distribution with a mean of 30 movements
  n.movements<-rpois(n.sharks,23)

  #Define simulated effect sizes to test
  effsNC<-seq(0,1.5,0.25)
  effsNM<-seq(0,1.5,0.25)

  effs<-cbind(c(rep(0,7),effsNC,effsNC),c(effsNM,rep(0,7),effsNM))

  FULLRES1<-FULLRES2<-FULLRES3<-list()

  RES1<-matrix(0,nr=nrow(effs),nc=6)
  RES2<-matrix(0,nr=nrow(effs),nc=6)
  RES3<-matrix(0,nr=nrow(effs),nc=6)

  for(m in 1:nrow(effs)){

    #Sample starting location of each shark
    #Neutral version
    start.locs<-sample(locs,n.sharks,replace=FALSE)
    #Low swell locations
    #start.locs<-sample(locs,n.sharks,replace=FALSE,prob=(swell+abs(min(swell)))^2)
    #High swell locations
    #start.locs<-sample(locs,n.sharks,replace=FALSE,prob=(max(swell)-swell)^2)


    #List to store movements of each shark
    movements<-list()

    #Set parameters for ecological effects on movement network structure
    p1<-effs[m,2]
    p2<-0
    p3<-0

    q1<-effs[m,1]
    q2<-0
    q3<-0

    #Simulate movements for each shark
    for(i in 1:n.sharks){
      movements[[i]]<-numeric()
      movements[[i]][1]<-start.locs[i]
      for(j in 1:n.movements[i]){

        swell_diffs<-swell-swell[movements[[i]][j]]
        rain_diffs<-rain-rain[movements[[i]][j]]
        turb_diffs<-turbidity-turbidity[movements[[i]][j]]
        dists<-dist_mat[movements[[i]][j],]

        locs2<-locs[-movements[[i]][j]]
        swell_diffs2<-swell_diffs[-movements[[i]][j]]
        swell_diffs2<-max(abs(swell_diffs2))-abs(swell_diffs2)
        swell_diffs2<-swell_diffs2-mean(swell_diffs2)
        rain_diffs2<-rain_diffs[-movements[[i]][j]]
        rain_diffs2<-max(abs(rain_diffs2))-abs(rain_diffs2)
        rain_diffs2<-rain_diffs2-mean(rain_diffs2)
        turb_diffs2<-turb_diffs[-movements[[i]][j]]
        turb_diffs2<-max(abs(turb_diffs2))-abs(turb_diffs2)
        turb_diffs2<-turb_diffs2-mean(turb_diffs2)
        dists2<-dists[-movements[[i]][j]]

        swell_diffs3<-swell_diffs[-movements[[i]][j]]
        rain_diffs3<-rain_diffs[-movements[[i]][j]]
        turb_diffs3<-turb_diffs[-movements[[i]][j]]

        probs<-1/dists2^2
        probs<-probs/max(probs)
        logit.probs<-boot::logit(probs)
        logit.probs<-logit.probs+p1*swell_diffs2+p2*rain_diffs2+p3*turb_diffs2+q1*swell_diffs3+q2*rain_diffs3+q3*turb_diffs3
        probs2<-boot::inv.logit(logit.probs)

        movements[[i]][j+1]<-sample(locs2,1,replace=FALSE,prob=probs2)

      }
    }

    #Create adjacency matrices for each shark
    networks<-list()
    for(i in 1:length(movements)){
      networks[[i]]<-matrix(0,nrow=n.locs,ncol=n.locs)
      for(j in 1:(n.movements[i])){
        networks[[i]][movements[[i]][j],movements[[i]][j+1]]<-networks[[i]][movements[[i]][j],movements[[i]][j+1]]+1
      }
    }

    #Create network objects for each shark
    networks2<-list()
    for(i in 1:length(networks)){
      networks2[[i]]<-as.network(networks[[i]], matrix.type = "adjacency", directed = TRUE,names.eval = "weight",ignore.eval = FALSE,loops=F)
      networks2[[i]] %v% "swell" <- swell
      networks2[[i]] %v% "rain" <- rain
      networks2[[i]] %v% "turbidity" <- turbidity
    }

    #Plot first network
    #plot(networks2[[1]],label = network.vertex.names(networks2[[1]]))

    #Set up arrays to store results
    res1<-array(NA,dim=c(6,5,n.sharks))
    res2<-array(NA,dim=c(6,5,n.sharks))
    res3<-array(NA,dim=c(6,5,n.sharks))

    #Fit ERGMs to the movement of each shark
    for(i in 1:n.sharks){
      if(max(networks[[i]])>1){

        x<-x2<-x3<-NULL
        start<-Sys.time()
        withTimeout(x<-try(ergm(networks2[[i]]~nonzero+sum+nodeicov("swell")+nodeicov("rain")+nodeicov("turbidity")+edgecov(dist_mat,'Geodist'),response='weight',reference = ~Poisson,control=control.ergm(MCMLE.Hummel.maxit=1000,MPLE.type="penalized"))),timeout=60,onTimeout="silent")
        end<-Sys.time()
        times[m,1,i]<-as.numeric(end-start)
        start<-Sys.time()
        withTimeout(x2<-try(ergm(networks2[[i]]~nonzero+sum+nodeocov("swell")+nodeocov("rain")+nodeocov("turbidity")+edgecov(dist_mat,'Geodist'),response='weight',reference = ~Poisson,control=control.ergm(MCMLE.Hummel.maxit=1000,MPLE.type="penalized"))),timeout=60,onTimeout="silent")
        end<-Sys.time()
        times[m,2,i]<-as.numeric(end-start)
        start<-Sys.time()
        withTimeout(x3<-try(ergm(networks2[[i]]~nonzero+sum+absdiff("swell")+absdiff("rain")+absdiff("turbidity")+edgecov(dist_mat,'Geodist'),response='weight',reference = ~Poisson,control=control.ergm(MCMLE.Hummel.maxit=1000,MPLE.type="penalized"))),timeout=60,onTimeout="silent")
        end<-Sys.time()
        times[m,3,i]<-as.numeric(end-start)
        if(length(x)>0&is(x,"try-error")==FALSE){res1[,,i]<-summary(x)$coefficients}
        if(length(x2)>0&is(x2,"try-error")==FALSE){res2[,,i]<-summary(x2)$coefficients}
        if(length(x3)>0&is(x3,"try-error")==FALSE){res3[,,i]<-summary(x3)$coefficients}
      }
      if(max(networks[[i]])==1){
        x<-x2<-x3<-NULL
        start<-Sys.time()
        withTimeout(x<-try(ergm(networks2[[i]]~edges+nodeicov("swell")+nodeicov("rain")+nodeicov("turbidity")+edgecov(dist_mat,'Geodist'))),timeout=60,onTimeout="silent")
        end<-Sys.time()
        times[m,1,i]<-as.numeric(end-start)
        start<-Sys.time()
        withTimeout(x2<-try(ergm(networks2[[i]]~edges+nodeocov("swell")+nodeocov("rain")+nodeocov("turbidity")+edgecov(dist_mat,'Geodist'))),timeout=60,onTimeout="silent")
        end<-Sys.time()
        times[m,2,i]<-as.numeric(end-start)
        start<-Sys.time()
        withTimeout(x3<-try(ergm(networks2[[i]]~edges+absdiff("swell")+absdiff("rain")+absdiff("turbidity")+edgecov(dist_mat,'Geodist'))),timeout=60,onTimeout="silent")
        end<-Sys.time()
        times[m,3,i]<-as.numeric(end-start)
        if(length(x)>0&is(x,"try-error")==FALSE){res1[2:6,,i]<-summary(x)$coefficients}
        if(length(x2)>0&is(x2,"try-error")==FALSE){res2[2:6,,i]<-summary(x2)$coefficients}
        if(length(x3)>0&is(x3,"try-error")==FALSE){res3[2:6,,i]<-summary(x3)$coefficients}
      }
      print(i)
    }

    FULLRES1[[m]]<-res1
    FULLRES2[[m]]<-res2
    FULLRES3[[m]]<-res3

    #Summarise results (no. of significant results) for all sharks
    sig_res1<-apply(res1<0.05,1:2,sum)[,5]
    sig_res2<-apply(res2<0.05,1:2,sum)[,5]
    sig_res3<-apply(res3<0.05,1:2,sum)[,5]

    RES1[m,]<-sig_res1
    RES2[m,]<-sig_res2
    RES3[m,]<-sig_res3

    print(m)

    tc<-tc+1

  }

  eval(parse(text=paste("res",mm,"<-list(FULLRES1,FULLRES2,FULLRES3,RES1,RES2,RES3)",sep="")))
  eval(parse(text=paste("saveRDS(res",mm,",'resMM",mm,".RDS')",sep="")))

}
